迭代器、生成器、装饰器有关知识:

这几个概念是 Python 中不容易理解透彻的概念，务必把所有的实验代码都完整的输入并理解清楚其中每一行的意思.

知识点:
	@ 迭代器
	@ 生成器
	@ 生成器表达式
	@ 闭包
	@ 装饰器


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

迭代器：

Python 迭代器（Iterators）对象在遵守迭代器协议时需要支持如下两种方法。

__iter__()，返回迭代器对象自身。这用在 for 和 in 语句中。

__next__()，返回迭代器的下一个值。如果没有下一个值可以返回，那么应该抛出 StopIteration 异常。


>>> class Counter(object):
...     def __init__(self, low, high):
...             self.current = low
...             self.high = high
...     
...     def __iter__(self):
...             return self
...     
...     def __next__(self):
		#返回下一个值，直到当前值大于 high
...             if self.current > self.high:
...                     raise StopIteration
...             else:
...                     self.current += 1		# 该行增加的 1 都不会因为 return 减 1 影响  
...                     return self.current - 1		# 返回每次的值
... 

现在我们能把这个迭代器用在我们的代码里：
>>> c = Counter(5,10)
>>> for i in c:
...     print(i, end=' ')
... 
5 6 7 8 9 10 

请记住迭代器只能被使用一次。这意味着迭代器一旦抛出 StopIteration，它会持续抛出相同的异常：

>>> c = Counter(5,6)
>>> next(c)
5
>>> next(c)
6
>>> next(c)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 11, in __next__
StopIteration
>>> next(c)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 11, in __next__
StopIteration


我们已经看过在 for 循环中使用迭代器的例子了，下面的例子试图展示迭代器被隐藏的细节：

>>> iterator = iter(c)
>>> while True:
...     try:
...         x = iterator.__next__()
...         print(x, end=' ')
...     except StopIteration as e:
...         break
...
5 6 7 8 9 10


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

生成器：

Python 生成器（Generators）的知识。生成器是更简单的创建迭代器的方法，这通过在函数中使用 yield 关键字完成：

>>> def my_generator():
...     print("Inside my generator")
...     yield 'a'
...     yield 'b'
...     yield 'c'
... 
>>> my_generator()
<generator object my_generator at 0x7f630f4c1048>

在上面的例子中我们使用 yield 语句创建了一个简单的生成器。我们能在 for 循环中使用它，就像我们使用任何其它迭代器一样：

>>> for char in my_generator():
...     print(char)
... 
Inside my generator
a
b
c


在下一个例子里，我们会使用一个生成器函数完成与 Counter 类相同的功能，并且把它用在 for 循环中：

>>> def counter_generator(low, high):
...     while low <= high:
...             yield low
...             low += 1
... 

>>> for i in counter_generator(5,10):
...     print(i, end=' ')
... 
5 6 7 8 9 10 

在 While 循环中，每当执行到 yield 语句时，返回变量 low 的值并且生成器状态转为挂起。在下一次调用生成器时，生成器从之前冻结的地方恢复执行然后变量 low 的值增一。生成器继续 while 循环并且再次来到 yield 语句...

当你调用生成器函数时它返回一个生成器对象。如果你把这个对象传入 dir() 函数，你会在返回的结果中找到 __iter__ 和 __next__ 两个方法名。

>>> c = counter_generator(5,10)
>>> dir(c)
['__class__', '__del__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__lt__', '__name__', '__ne__', '__new__', '__next__', '__qualname__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'close', 'gi_code', 'gi_frame', 'gi_running', 'gi_yieldfrom', 'send', 'throw']


我们通常使用生成器进行惰性求值。这样使用生成器是处理大数据的好方法。如果你不想在内存中加载所有数据，你可以使用生成器，一次只传递给你一部分数据。

os.path.walk() 函数是最典型的这样的例子，它使用一个回调函数和当前的 os.walk 生成器。使用生成器实现节约内存。

我们可以使用生成器产生无限多的值。
以下是一个这样的例子：

>>> def infinite_generator(start=0):
...     while True:
...             yield start
...             start += 1
... 
>>> for num in infinite_generator(4):
...     print(num, end=' ')
...     if num > 20:
...             break
... 
4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21


如果我们回到 my_generator() 这个例子，我们会发现生成器的一个特点：它们是不可重复使用的：

>>> g = my_generator()
>>> for c in g:
...     print(c)
... 
Inside my generator
a
b
c
>>> for c in g:
...     print(c)
... 
>>> 


一个创建可重复使用生成器的方式是不保存任何状态的基于对象的生成器。任何一个生成数据的含有 __iter__ 方法的类都可以用作对象生成器。

在下面的例子中我们重新创建了 counter 生成器：

>>> class Counter(object):
...     def __init__(self, low, high):
...             self.low = low
...             self.high = high
...     def __iter__(self):
...             counter = self.low
...             while self.high >= counter:
...                     yield counter
...                     counter += 1
... 
>>> gobj = Counter(5,10)
>>> for num in gobj:
...     print(num, end=' ')
... 
5 6 7 8 9 10 

>>> for num in gobj:
...     print(num, end=" ")
... 
5 6 7 8 9 10 


上面的 gobj 并不是生成器或迭代器，因为它不具有 __next__ 方法，只是一个可迭代对象，生成器是一定不能重复循环的。 如果想要使类的实例变成迭代器，可以用 __iter__ + __next__ 方法实现：

>>> from collections import Iterator
>>> class Test():
...     def __init__(self, a, b):
...             self.a = a
...             self.b = b
...     def __iter__(self):
...             return self
...     def __next__(self):
...             self.a += 1
...             if self.a > self.b:
...                     raise StopIteration()
...             return self.a
... 
>>> test = Test(5,10)
>>> test
<__main__.Test object at 0x7f630f4c7390>
>>> for i in test:
...     print(i, end=' ')
... 
6 7 8 9 10

>>> isinstance(test, Iterator)
True

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

生成器表达式：

生成器表达式（Generator expressions），生成器表达式是列表推导式和生成器的一个高性能，内存使用效率高的推广：

举个例子，我们尝试对 1 到 9 的所有数字进行平方求和：

>>> sum([x*x for x in range(1,10)])

这个例子实际上首先在内存中创建了一个平方数值的列表，然后遍历这个列表，最终求和后释放内存。你能理解一个大列表的内存占用情况是怎样的。

我们可以通过使用生成器表达式来节省内存使用。

>>> sum([x*x for x in range(1,10)])

生成器表达式的语法要求其总是直接在在一对括号内()，并且不能在两边有逗号。这基本上意味着下面这些例子都是有效的生成器表达式用法示例：

>>> sum([x*x for x in range(1,10)])
285
>>> g = (x*x for x in range(1,10))
>>> g
<generator object <genexpr> at 0x7f630f4c10f8>
>>> num = next(g)
>>> num
1
>>> num = next(g)
>>> num
4
....
....................

我们可以把生成器和生成器表达式联系起来，在下面的例子中我们会读取文件 '/etc/crontab' 并且查看任意指定任务（例中我们搜索 'day' ）是否成功运行。

我们可以用 shell 命令 tail -f /etc/crontab |grep day 完成同样的事（按 Ctrl + C 终止命令执行）

[root@dev1 ~]# tail -f  /etc/crontab | grep day
# |  |  .---------- day of month (1 - 31)
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
^C

例子：
>>> jobtext = 'day'
>>> all = (line for line in open('/etc/crontab', 'r'))
>>> job = (line for line in all if line.find(jobtext) != -1)
>>> text = next(job)
>>> text
'# |  |  .---------- day of month (1 - 31)\n'
>>> text = next(job)
>>> text
'# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\n'

没有数据报错返回StopIterator:
>>> text = next(job)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration

可以写一个 for 循环遍历所有行.



find()方法,不能用于列表list:

str.find(str, beg=0, end=len(string))
str -- 指定检索的字符串
beg -- 开始索引，默认为0。
end -- 结束索引，默认为字符串的长度。
Python find() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，
如果包含子字符串返回开始的索引值，否则返回-1。不影响后面程序执行

>>> str1 = 'python is no the way'
>>> str2 = 'no'
>>> str3 = 'nice'
>>> print(str1.index(str2))
10
>>> print(str1.find(str2))		# 查找则显示索引 10
10
>>> print(str1.find(str3))		# 不能查找到则返回 -1
-1
>>> print(str1.find(str2, 1, 3))	#指定开始到结束索引范围内，没有找到则返回 -1
-1


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

闭包：
闭包（Closures）是由另外一个函数返回的函数。我们使用闭包去除重复代码。在下面的例子中我们创建了一个简单的闭包来对数字求和：


>>> def add_number(num):
...     def adder(number):
...             #adder 是一个闭包
...             return num + number
...     return adder			# 最后返回 adder() 函数闭包的和
... 
>>> a_10 = add_number(10)
>>> a_10(21)
31
>>> a_10(34)
44
>>> a_5 = add_number(5)
>>> a_5(3)
8

adder 是一个闭包，把一个给定的数字与预定义的一个数字相加。

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

装饰器：

装饰器（Decorators）用来给一些对象动态的添加一些新的行为，我们使用过的闭包也是这样的。

我们会创建一个简单的示例，将在函数执行前后打印一些语句。

>>> 
>>> def my_decorator(func):			# 动态参数的函数名 func
...     def wrapper(*args, **kwargs):		# *args , **kwargs 动态参数
...             print("Before call")		# 静态有行为
...             result = func(*args, **kwargs)	# 动态添加新的行为或动态函数.占位置 列如 add() 求和函数
...             print("After call")		# 静态行为
...             return result			# 返回结果
...     return wrapper				# 最后返回闭包函数输出
... 

使用修饰器添加动态新的行为：
>>> @my_decorator
... def add(a, b):
...     # 我们的求和函数
...     return a + b
... 
>>> add(1,3)
Before call
After call
4
----------------------------------------

>>> def new_decorator(num):
...     def newwrapper(*args, **kwargs):
...             print("Before call")
...             result = num(*args, **kwargs)
...             print("After call")
...             return result
...     return newwrapper
... 
添加一些新的行为:
>>> @new_decorator
... def newadd(a, b):
...     return a * b
... 
>>> newadd(3,3)
Before call
After call
9


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

总结
知识点回顾：

	@ 迭代器
	@ 生成器
	@ 生成器表达式
	@ 闭包
	@ 装饰器

本实验我们学习了迭代器和生成器以及装饰器这几个高级特性的定义方法和用法，也了解了怎样使用生成器表达式和怎样定义闭包。






