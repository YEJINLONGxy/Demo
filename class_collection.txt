挑战规则：
1. 仔细阅读题目描述，在实验环境中完成任务
2. 完成任务后点击步骤右下角的提交检测按钮
3. 系统自动评测并给出是否通过的信息


挑战：类和collection

介绍
   本次挑战中我们将通过改写之前实验中的 student_teacher.py 程序实现更加丰富的功能

目标
   改写 我们在 类 这个实验中 继承 部分的 student_teacher.py 脚本，实现以下功能：

   a.在 Person() 类中增添函数 get_grade()
   b.对于教师类，get_grade() 函数可以自动统计出老师班上学生的得分情况并按照频率的高低以 A: X, B: X, C: X, D: X 的形式打印出来
   c.对于学生类，get_grade() 函数则可以以 Pass: X, Fail: X 来统计自己的成绩情况（A,B,C 为 Pass, 如果得了 D 就认为是 Fail）。


要求:

	1.根据命令行中的第一个参数 teacher 或者 student 来判断最终输出的格式。
	2.命令行中第二个输入的参数是需要统计的字符串

执行示例:

[root@dev1 practice]# ./student_teacher.py teacher BBCAADDA
A: 3,B: 2,D: 2,C: 1
[root@dev1 practice]# ./student_teacher.py student BBCAADDA
Pass: 6, Fail: 2


提示语:
	@ Teacher 及 Student 类的 __init__() 也要增加 grade 参数
	@ import sys
	@ collections 中的 Counter 子类
	@ format() 以及 join


知识点:
	@ 类
	@ Collection 模块
	@ 注意最终的打印形式

+++++++++++++++++++++++++++++ 代码 ++++++++++++++++++++++++++++++++++

#!/usr/bin/env python3
import sys
from collections import Counter

class Person(object):
	"""
	返回具有给定名称的 Person 对象
	"""
	def __init__(self, name):
		self.name = name
#		self.args = args

	def get_details(self):
		"""
		返回包含人名的字符串
		"""
		return self.name
	
	def get_grade(self):
	#	return self.args
		return 0		

class Student(Person):
	"""
	返回 Student 对象， 采用 name, branch, year 3 个参数
	"""
	
	def __init__(self, name, branch, year, args):
		Person.__init__(self, name)
		self.args = args
		self.branch = branch
		self.year = year
		
	def get_details(self):
		"""
		返回包含学生具体信息的字符串
		"""
		return "{} studies {} and is in {} year.".format(self.name, self.branch, self.year)
	
	def get_grade(self):
		word = Counter(self.args).most_common(4)
		n1 = 0
		n2 = 0
		for k, v in word:
			if k != "D":
				n1 += v
			else:
				n2 += v
		""" ---------or-------- 
		
		for item  in word:
			if item[0] != 'D':	#使用索引
				n1 += item[1]
			else:
				n2 += item[1] 
		"""
		print("Pass: {}, Fail: {}".format(n1, n2))
	

class Teacher(Person):
	"""
	返回 Teacher 对象，采用字符串列表作为参数
	"""

	def __init__(self, name, papers,args):
		Person.__init__(self, name)
		self.args = args
		self.papers = papers

	def get_details(self):
		return "{} teaches {}".format(self.name, ','.join(self.papers))

	def get_grade(self):
		word = Counter(self.args).most_common(4)
		s = []
		for k, v in word:
#			print("{} : {}".format(k, v ), end=",")
#		print()

			s.append("{}: {}".format(k, v))
		print(','.join(s))

#person1 = Person('Sachin', sys.argv[2])

person1 = Person("Sachin")
if __name__ == "__main__":
	if len(sys.argv) != 3:
		print("USE: {} student|teacher  AABBBCCDDC".format(sys.argv[0]))
		sys.exit(-1)
	else:
		if sys.argv[1] == "student":
			student1 = Student('Kushal', 'CSE', 2005, sys.argv[2])
			student1.get_grade()
		else:
			teacher1 = Teacher('Prashad', ['C', 'C++'], sys.argv[2])
			teacher1.get_grade()


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++





