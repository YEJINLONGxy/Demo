处理异常

使用 try...except 块来处理任意异常
基本语法：

try:
    statements to be inside try clause
    statement2
    statement3
    ...
except ExceptionName:
    statements to evaluated in case of ExceptionName happens

它以如下方式工作：

a.首先，执行 try 子句 （在 try 和 except 关键字之间的部分）。
b.如果没有异常发生，except 子句 在 try 语句执行完毕后就被忽略了。
c.如果在 try 子句执行过程中发生了异常，那么该子句其余的部分就会被忽略。
d.如果异常匹配于 except 关键字后面指定的异常类型，就执行对应的 except 子句。然后继续执行 try 语句之后的代码。
e.如果发生了一个异常，在 except 子句中没有与之匹配的分支，它就会传递到上一级 try 语句中。
f.如果最终仍找不到对应的处理语句，它就成为一个 未处理异常，终止程序运行，显示提示信息。

例子：

>>> def get_number():
...     "Returns a float number"
...     number = float(input("Enter a float number: "))
...     return number
... 
>>> while True:
...     try:
...             print(get_number())
...     except ValueError:
...             print("You entered a wrong value.")
... 
Enter a float number: 34
34.0
Enter a float number: 24,0		#输入24，0
You entered a wrong value.		#Ctrl + c
Enter a float number: Traceback (most recent call last):
  File "<stdin>", line 3, in <module>
  File "<stdin>", line 3, in get_number
KeyboardInterrupt


首先我输入了一个合适的浮点值，解释器返回输出这个值。
然后我输入以逗号分隔的值，抛出 ValueError 异常，except 子句捕获之，并且打印出错误信息。
第三次我按下 Ctrl + C ，导致了 KeyboardInterrupt 异常发生，这个异常并未在 except 块中捕获，因此程序执行被中止



一个空的 except 语句能捕获任何异常:
>>> try:
...     input() 		## 输入的时候按下 Ctrl + C 产生 KeyboardInterrupt
... except:
...     print("Unknown Exception")
... 
KeyboardInterrupt

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

使用 raise 语句抛出一个异常


>>> raise ValueError("A value error happened.")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: A value error happened.

我们可以捕获任何其它普通异常一样，来捕获这些异常

>>> try:
...     raise ValueError("A value error happened")
... except ValueError:
...     print("ValueError in our code.")
... 
ValueError in our code.


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
定义清理行为：

try 语句还有另一个可选的 finally 子句，目的在于定义在任何情况下都一定要执行的功能

>>> try:
...     raise KeyboardInterrupt
... finally:
...     print("Goodbye, world!")
... 
Goodbye, world!
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
KeyboardInterrupt


  不管有没有发生异常，finally 子句 在程序离开 try 后都一定会被执行。当 try 语句中发生了未被 except 捕获的异常（ 或者它发生在 except 或 else 子句中），在 finally 子句执行完后它会被重新抛出。

在真实场景的应用程序中，finally 子句用于释放外部资源（文件或网络连接之类的），无论它们的使用过程中是否出错











