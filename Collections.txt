
collections 是 Python 内建的一个集合模块，提供了许多有用的集合类:

知识点：
	a. Counter 类
	b. defaultdict 类
	c. namedtuple 类


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

collections.Counter  函数：
在这个实验我们会学习 Collections 模块。这个模块实现了一些很好的数据结构，它们能帮助你解决各种实际问题。

 这是如何导入这个模块，现在我们来看看其中的一些类。

>>> import collections

Counter 是一个有助于 hashable 对象计数的 dict 子类。它是一个无序的集合，其中 hashable 对象的元素存储为字典的键，它们的计数存储为字典的值，计数可以为任意整数，包括零和负数。 
我们可以这样查看 Counter 的帮助信息,事实上这些信息来源于 Counter 的文档字符串:collections.Counter.__doc__

>>> help(collections.Counter)

Help on class Counter in module collections:

class Counter(builtins.dict)
 |  Dict subclass for counting hashable items.  Sometimes called a bag
 |  or multiset.  Elements are stored as dictionary keys and their counts
 |  are stored as dictionary values.
 |  
 |  >>> c = Counter('abcdeabcdabcaba')  # count elements from a string
 |  
 |  >>> c.most_common(3)                # three most common elements
 |  [('a', 5), ('b', 4), ('c', 3)]
 |  >>> sorted(c)                       # list all unique elements
 |  ['a', 'b', 'c', 'd', 'e']
 |  >>> ''.join(sorted(c.elements()))   # list elements with repetitions
 |  'aaaaabbbbcccdde'
 |  >>> sum(c.values())                 # total of all counts
 |  15
 |  
 |  >>> c['a']                          # count of letter 'a'
 |  5
 |  >>> for elem in 'shazam':           # update counts from an iterable
 |  ...     c[elem] += 1                # by adding 1 to each element's count
 |  >>> c['a']                          # now there are seven 'a'
 |  7
 |  >>> del c['b']                      # remove all 'b'
 |  >>> c['b']                          # now there are zero 'b'
 |  0
 |  
:

下面我们来看一个例子，例子中我们查看 Python 的 LICENSE 文件中某些单词出现的次数:

>>> import os
>>> os.listdir("/home/shiyanlou/")
['.bash_logout', '.bash_profile', '.bashrc', 'Code', 'Desktop', 'bin', 'doc', '.bash_history', 'shiyan', 'shiyanlou.log', 'zhou.log', 'project.log', 'python_code', 'ircnicks.txt', 'sample2.txt', 'sample.txt', 'String.txt', 'prog.py', 'Lscpu.py', '__pycache__', 'mymodule']
>>> os.getcwd()
'/home/shiyanlou'
>>> with open("String.txt") as fd:
...     file = fd.read()
... 
>>> print(file)		# 查看String.txt文件内容
awe3fa8fa4aewfawijfa;fjaweawfeawawefargaefaef5awefasdfeargfasdcds2awea4afadszsdvzxefafzsdva7fasdczdvafedszv6zvczvdsf2awefafzsdccsea

导入 Conter 模块
>>> from collections import Counter
>>> import re
测试一：
>>> path = "/home/shiyanlou/String.txt"
>>> words = re.f
re.findall(    re.finditer(   re.fullmatch(  re.functools   
>>> words = re.findall("\w+", open(path).read().lower())
>>> Counter(words).most_common(3)
[('awe3fa8fa4aewfawijfa', 1), ('fjaweawfeawawefargaefaef5awefasdfeargfasdcds2awea4afadszsdvzxefafzsdva7fasdczdvafedszv6zvczvdsf2awefafzsdccsea', 1)]
测试二：
>>> path =  "/usr/lib/python3.4/site-packages/easy_install.py"
>>> words = re.findall("\w+", open(path).read().lower())
>>> Counter(words).most_common(10)
[('command', 2), ('main', 2), ('run', 1), ('the', 1), ('easyinstall', 1), ('if', 1), ('__name__', 1), ('__main__', 1), ('from', 1), ('setuptools', 1)]

Counter 对象有一个叫做 elements() 的方法，其返回的序列中，依照计数重复元素相同次数，元素顺序是无序的:
>>> from  collections import Counter
>>> c = Counter(a=4, b=2, c=0, d = -2)
>>> list(c.elements())
['a', 'a', 'a', 'a', 'b', 'b']


most_common() 方法返回最常见的元素及其计数，顺序为最常见到最少:
>>> Counter("abracadabra").most_common(3)
[('a', 5), ('b', 2), ('r', 2)]

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


defaultdict:
	是内建 dict 类的子类，它覆写了一个方法并添加了一个可写的实例变量,其余功能与字典相同.

        efaultdict() 第一个参数提供了 default_factory 属性的初始值，默认值为 None.default_factory 属性值将作
为字典的默认数据类型;所有剩余的参数与字典的构造方法相同，包括关键字参数。

	同样的功能使用 defaultdict 比使用 dict.setdefault 方法快;


defaultdict 用例：
	在例子中你可以看到，即使 defaultdict 对象不存在某个键，它会自动创建一个空列表

>>> from collections import defaultdict
>>> s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 5)]
>>> d = defaultdict(list)
>>> d
defaultdict(<class 'list'>, {})
>>> for k, v in s:
...     d[k].append(v)
... 
>>> d
defaultdict(<class 'list'>, {'yellow': [1, 3], 'blue': [2, 4], 'red': [5]})
>>> d.items()
dict_items([('yellow', [1, 3]), ('blue', [2, 4]), ('red', [5])])


>>> for k, v in s:
...     print(k,v)
... 
yellow 1
blue 2
yellow 3
blue 4
red 5

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

namedtuple:
	命名元组有助于对元组每个位置赋予意义，并且让我们的代码有更好的可读性和自文档性。你可以在任何使用元组
地方使用命名元组。

	
	在例子中我们会创建一个命名元组以展示为元组每个位置保存信息


>>> from collections import namedtuple
>>> Point = namedtuple("Point", ['x', 'y']) 		#定义命名元组
>>> p = Point(10, y= 20)				#创建一个对象
>>> p
Point(x=10, y=20)
>>> p.x + p.y
30
>>> p[0] + p[1]						#像普通元组那样访问元素
30	
>>> x, y = p						#元组拆封
>>> x
10
>>> y
20
>>> from collections import namedtuple
>>> Hello = namedtuple('hello',['h', 'w'])
>>> o = Hello(10, 20)
>>> o
hello(h=10, w=20)


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

本节知识点回顾：

	Counter 类
	defaultdict 类
	namedtuple 类
	这个实验我们使用了 Collections 中的一些数据结构，可能你目前并用不上他，但希望你以后需要的时候会想起
它们




